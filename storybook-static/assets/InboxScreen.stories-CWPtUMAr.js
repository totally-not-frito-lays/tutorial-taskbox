import{n as p,s as h,S as O,i as P,v as D,w as X,t as k,m as _,x as q,A as M,e as g,c as v,q as V,f as S,y as W,a as R,b as H,d as y}from"./index-DximhN0d.js";import{P as j}from"./PureTaskList-BKmt5HM0.js";import{w as F,f as $}from"./index-Ci4wedTg.js";import"./Task-t0s9Q890.js";const u=[];function G(r,e=p){let s;const t=new Set;function n(l){if(h(r,l)&&(r=l,s)){const o=!u.length;for(const c of t)c[1](),u.push(c,r);if(o){for(let c=0;c<u.length;c+=2)u[c][0](u[c+1]);u.length=0}}}function a(l){n(l(r))}function i(l,o=p){const c=[l,o];return t.add(c),t.size===1&&(s=e(n,a)||p),l(r),()=>{t.delete(c),t.size===0&&s&&(s(),s=null)}}return{set:n,update:a,subscribe:i}}const J=[{id:"1",title:"Something",state:"TASK_INBOX"},{id:"2",title:"Something more",state:"TASK_INBOX"},{id:"3",title:"Something else",state:"TASK_INBOX"},{id:"4",title:"Something again",state:"TASK_INBOX"}],Q=()=>{const{subscribe:r,update:e}=G({tasks:J,status:"idle",error:!1});return{subscribe:r,archiveTask:s=>e(t=>{const n=t.tasks.map(a=>a.id===s?{...a,state:"TASK_ARCHIVED"}:a).filter(a=>a.state==="TASK_INBOX"||a.state==="TASK_PINNED");return{...t,tasks:n}}),pinTask:s=>{e(t=>{const n=t.tasks.find(a=>a.id===s);return n&&(n.state="TASK_PINNED"),t})},isError:()=>e(s=>({...s,error:!0}))}},T=Q();function U(r){let e,s;return e=new j({props:{tasks:r[0].tasks}}),e.$on("onPinTask",r[1]),e.$on("onArchiveTask",r[2]),{c(){D(e.$$.fragment)},m(t,n){X(e,t,n),s=!0},p(t,[n]){const a={};n&1&&(a.tasks=t[0].tasks),e.$set(a)},i(t){s||(k(e.$$.fragment,t),s=!0)},o(t){_(e.$$.fragment,t),s=!1},d(t){q(e,t)}}}function Y(r,e,s){let t;M(r,T,i=>s(0,t=i));function n(i){T.pinTask(i.detail.id)}function a(i){T.archiveTask(i.detail.id)}return[t,n,a]}class z extends O{constructor(e){super(),P(this,e,Y,U,h,{})}}z.__docgen={version:3,name:"TaskList.svelte",data:[],computed:[],methods:[],components:[],description:null,keywords:[],events:[],slots:[],refs:[]};function Z(r){let e,s,t,n,a;return n=new z({}),{c(){e=g("div"),s=g("nav"),s.innerHTML='<h1 class="title-page">Taskbox</h1>',t=R(),D(n.$$.fragment),H(e,"class","page lists-show")},m(i,l){v(i,e,l),y(e,s),y(e,t),X(n,e,null),a=!0},i(i){a||(k(n.$$.fragment,i),a=!0)},o(i){_(n.$$.fragment,i),a=!1},d(i){i&&S(e),q(n)}}}function ee(r){let e;return{c(){e=g("div"),e.innerHTML='<div class="wrapper-message"><span class="icon-face-sad"></span> <p class="title-message">Oh no!</p> <p class="subtitle-message">Something went wrong</p></div>',H(e,"class","page lists-show")},m(s,t){v(s,e,t)},i:p,o:p,d(s){s&&S(e)}}}function te(r){let e,s,t,n;const a=[ee,Z],i=[];function l(o,c){return o[0]?0:1}return s=l(r),t=i[s]=a[s](r),{c(){e=g("div"),t.c()},m(o,c){v(o,e,c),i[s].m(e,null),n=!0},p(o,[c]){let b=s;s=l(o),s!==b&&(W(),_(i[b],1,1,()=>{i[b]=null}),V(),t=i[s],t||(t=i[s]=a[s](o),t.c()),k(t,1),t.m(e,null))},i(o){n||(k(t),n=!0)},o(o){_(t),n=!1},d(o){o&&S(e),i[s].d()}}}function se(r,e,s){let{error:t=!1}=e;return r.$$set=n=>{"error"in n&&s(0,t=n.error)},[t]}class C extends O{constructor(e){super(),P(this,e,se,te,h,{error:0})}}C.__docgen={version:3,name:"InboxScreen.svelte",data:[{name:"error",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"}],computed:[],methods:[],components:[],description:null,keywords:[],events:[],slots:[],refs:[]};const oe={component:C,title:"InboxScreen",tags:["autodocs"]},d={},f={args:{error:!0}},m={play:async({canvasElement:r})=>{const e=F(r);await $.click(e.getByLabelText("pinTask-1")),await $.click(e.getByLabelText("pinTask-3"))}};var w,x,I;d.parameters={...d.parameters,docs:{...(w=d.parameters)==null?void 0:w.docs,source:{originalSource:"{}",...(I=(x=d.parameters)==null?void 0:x.docs)==null?void 0:I.source}}};var E,A,B;f.parameters={...f.parameters,docs:{...(E=f.parameters)==null?void 0:E.docs,source:{originalSource:`{
  args: {
    error: true
  }
}`,...(B=(A=f.parameters)==null?void 0:A.docs)==null?void 0:B.source}}};var L,N,K;m.parameters={...m.parameters,docs:{...(L=m.parameters)==null?void 0:L.docs,source:{originalSource:`{
  play: async ({
    canvasElement
  }) => {
    const canvas = within(canvasElement);
    // Simulates pinning the first task
    await fireEvent.click(canvas.getByLabelText('pinTask-1'));
    // Simulates pinning the third task
    await fireEvent.click(canvas.getByLabelText('pinTask-3'));
  }
}`,...(K=(N=m.parameters)==null?void 0:N.docs)==null?void 0:K.source}}};const ce=["Default","Error","WithInteractions"];export{d as Default,f as Error,m as WithInteractions,ce as __namedExportsOrder,oe as default};
